{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PI Monitoring Documentation About The Project PI Monitoring is a set of Python scripts used to monitor web sites and report incidents and operational status to statuspage.io Built With Python Getting Started To get a local copy up and running follow these simple steps. Prerequisites Python PyYaml ColoredLogs These scripts were written and tested on Python 3.7.3 (Raspbian) and 3.9.1 (Windows). Install the dependencies as follows: pip3 install pyyaml coloredlogs Installation Clone the repo sh git clone https://github.com/spyder007/pi-monitoring.git Copy monitor.config.json.template to monitor.config.json and modify the settings within those config files accordingly Execute monitor.py sh python monitor.py Configuration Copy monitor.config.json.template to monitor.config.json . Edit monitor.config.json . Full documentation can be found in Configuration { \"statusChecks\": [ { \"name\": \"Site (Prod)\", \"url\": \"https://your.domain.com\", \"statusPageComponentId\": \"123215125\" } ], \"notification\": { \"smtp_url\": \"smtp.gmail.com\", \"smtp_port\": 587, \"smtp_sender_id\": \"gmail_email\", \"smtp_sender_pass\": \"gmail_pass\", \"smsEmail\": \"email@vtext.com\" }, \"statusPage\": { \"apiKey\": \"status_page_api_key\", \"pageId\": \"status_page_page_id\" } }","title":"PI Monitoring Documentation"},{"location":"#pi-monitoring-documentation","text":"","title":"PI Monitoring Documentation"},{"location":"#about-the-project","text":"PI Monitoring is a set of Python scripts used to monitor web sites and report incidents and operational status to statuspage.io","title":"About The Project"},{"location":"#built-with","text":"Python","title":"Built With"},{"location":"#getting-started","text":"To get a local copy up and running follow these simple steps.","title":"Getting Started"},{"location":"#prerequisites","text":"Python PyYaml ColoredLogs These scripts were written and tested on Python 3.7.3 (Raspbian) and 3.9.1 (Windows). Install the dependencies as follows: pip3 install pyyaml coloredlogs","title":"Prerequisites"},{"location":"#installation","text":"Clone the repo sh git clone https://github.com/spyder007/pi-monitoring.git Copy monitor.config.json.template to monitor.config.json and modify the settings within those config files accordingly Execute monitor.py sh python monitor.py","title":"Installation"},{"location":"#configuration","text":"Copy monitor.config.json.template to monitor.config.json . Edit monitor.config.json . Full documentation can be found in Configuration { \"statusChecks\": [ { \"name\": \"Site (Prod)\", \"url\": \"https://your.domain.com\", \"statusPageComponentId\": \"123215125\" } ], \"notification\": { \"smtp_url\": \"smtp.gmail.com\", \"smtp_port\": 587, \"smtp_sender_id\": \"gmail_email\", \"smtp_sender_pass\": \"gmail_pass\", \"smsEmail\": \"email@vtext.com\" }, \"statusPage\": { \"apiKey\": \"status_page_api_key\", \"pageId\": \"status_page_page_id\" } }","title":"Configuration"},{"location":"configuration-reference/","text":"Configuration Configuration Module This module provides a function for reading a JSON file into the provided Settings object. HealthCheckSettings Settings for a HealthCheck A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statusPage is defined, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description name str The name of the site being checked url str The url to be fetched as part of the check statusPage StatusPageComponentSettings Any StatusPage-related component settings MonitorSettings MonitorSettings This class represents the entire structure of the configuration file ( monitor.config.json by default). Attributes: Name Type Description statusChecks List[configuration.HealthCheckSettings] The collection of statusCheck settings notification NotificationSettings The settings object for notifications statusPage StatusPageSettings The settings object for StatusPage.io NotificationSettings Notification Settings This class represents settings for notifications. If you are using Gmail to send, you need to set your account's Allow Less Secure Apps setting to true Attributes: Name Type Description smtp_url str The URL of the SMTP host smtp_port int The SMTP Port to use smtp_sender_id str The SMTP user smtp_sender_Pass str The SMTP user's password smsEmail str The email to receive notifications StatusPageComponentSettings Settings for StatusPage.io components Attributes: Name Type Description componentId str The ID of the component in your statuspage.io page StatusPageSettings Settings for StatusPage.io Attributes: Name Type Description apiKey str The API Key to access statuspage.io pageId str Your PageId for statuspage.io readConfiguration ( file = 'monitor.config.json' , defaultSettings = {}) Read Configuration file and return settings Parameters: Name Type Description Default file str The file name to use for configuration. The default value is monitor.config.json 'monitor.config.json' defaultSettings MonitorSettings A default instance of the settings to use if the file cannot be found. {} Returns: Type Description MonitorSettings MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. Source code in pi-monitoring\\configuration.py def readConfiguration ( file : str = 'monitor.config.json' , defaultSettings : MonitorSettings = {}) -> MonitorSettings : \"\"\"Read Configuration file and return settings Args: file: The file name to use for configuration. The default value is `monitor.config.json` defaultSettings: A default instance of the settings to use if the file cannot be found. Returns: MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. \"\"\" configPath = Path ( file ) if ( not configPath . exists ()): logger . info ( \"Configuration file not found: %s . Using default\" , file ) return defaultSettings configDataRaw = configPath . read_text () return json . loads ( configDataRaw , object_hook = Generic . from_dict )","title":"Configuration"},{"location":"configuration-reference/#configuration_1","text":"Configuration Module This module provides a function for reading a JSON file into the provided Settings object.","title":"Configuration"},{"location":"configuration-reference/#configuration.HealthCheckSettings","text":"Settings for a HealthCheck A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statusPage is defined, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description name str The name of the site being checked url str The url to be fetched as part of the check statusPage StatusPageComponentSettings Any StatusPage-related component settings","title":"HealthCheckSettings"},{"location":"configuration-reference/#configuration.MonitorSettings","text":"MonitorSettings This class represents the entire structure of the configuration file ( monitor.config.json by default). Attributes: Name Type Description statusChecks List[configuration.HealthCheckSettings] The collection of statusCheck settings notification NotificationSettings The settings object for notifications statusPage StatusPageSettings The settings object for StatusPage.io","title":"MonitorSettings"},{"location":"configuration-reference/#configuration.NotificationSettings","text":"Notification Settings This class represents settings for notifications. If you are using Gmail to send, you need to set your account's Allow Less Secure Apps setting to true Attributes: Name Type Description smtp_url str The URL of the SMTP host smtp_port int The SMTP Port to use smtp_sender_id str The SMTP user smtp_sender_Pass str The SMTP user's password smsEmail str The email to receive notifications","title":"NotificationSettings"},{"location":"configuration-reference/#configuration.StatusPageComponentSettings","text":"Settings for StatusPage.io components Attributes: Name Type Description componentId str The ID of the component in your statuspage.io page","title":"StatusPageComponentSettings"},{"location":"configuration-reference/#configuration.StatusPageSettings","text":"Settings for StatusPage.io Attributes: Name Type Description apiKey str The API Key to access statuspage.io pageId str Your PageId for statuspage.io","title":"StatusPageSettings"},{"location":"configuration-reference/#configuration.readConfiguration","text":"Read Configuration file and return settings Parameters: Name Type Description Default file str The file name to use for configuration. The default value is monitor.config.json 'monitor.config.json' defaultSettings MonitorSettings A default instance of the settings to use if the file cannot be found. {} Returns: Type Description MonitorSettings MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. Source code in pi-monitoring\\configuration.py def readConfiguration ( file : str = 'monitor.config.json' , defaultSettings : MonitorSettings = {}) -> MonitorSettings : \"\"\"Read Configuration file and return settings Args: file: The file name to use for configuration. The default value is `monitor.config.json` defaultSettings: A default instance of the settings to use if the file cannot be found. Returns: MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. \"\"\" configPath = Path ( file ) if ( not configPath . exists ()): logger . info ( \"Configuration file not found: %s . Using default\" , file ) return defaultSettings configDataRaw = configPath . read_text () return json . loads ( configDataRaw , object_hook = Generic . from_dict )","title":"readConfiguration()"},{"location":"enums/","text":"Enums OpLevel OpLevel Enum","title":"Enums"},{"location":"enums/#enums_1","text":"","title":"Enums"},{"location":"enums/#enums.OpLevel","text":"OpLevel Enum","title":"OpLevel"},{"location":"healthchecks-reference/","text":"HealthChecks HealthCheckExecutor HealthCheckExecutor The HealthCheckExecutor encapsulates the functionality to perform a health check on a site and properly notify users or update statuspage.io accordingly. A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statuspage_operator is present and the HealthCheckSettings have a componentId set, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description statuspage_operator StatusPageOperator The name of the site being checked notifier Notifier The url to be fetched as part of the check __init__ ( self , statusOperator , notifier ) special Constructor Constructs an instance of the HealthCheckExecutor with the given StatusPageOperator and Notifier . Attributes: Name Type Description statuspage_operator The name of the site being checked notifier The url to be fetched as part of the check Source code in pi-monitoring\\healthchecks.py def __init__ ( self , statusOperator : statuspage_io . StatusPageOperator , notifier : notifications . Notifier ): \"\"\"Constructor Constructs an instance of the HealthCheckExecutor with the given [StatusPageOperator][statuspage_io.StatusPageOperator] and [Notifier][notifications.Notifier]. Attributes: statuspage_operator: The name of the site being checked notifier: The url to be fetched as part of the check \"\"\" self . statuspage_operator = statusOperator self . notifier = notifier execute_health_check ( self , checkSettings ) Execute a health check Executes a health check using the provided HealthCheckSettings. Parameters: Name Type Description Default checkSettings HealthCheckSettings An instance of HealthCheckSettings required Source code in pi-monitoring\\healthchecks.py def execute_health_check ( self , checkSettings : configuration . HealthCheckSettings ): \"\"\" Execute a health check Executes a health check using the provided HealthCheckSettings. Args: checkSettings: An instance of [HealthCheckSettings][configuration.HealthCheckSettings] \"\"\" logger . info ( 'Checking %s ...' , checkSettings . name ) sendNotification = False opLevel = OpLevel . Operational httpResult = self . _get_http ( checkSettings . url ) if ( httpResult . success ): # Good Check logger . info ( \"Status OK\" ) opLevel = OpLevel . Operational else : # Bad check opLevel = OpLevel . Full_Outage logger . warning ( httpResult . message ) sendNotification = True if ( checkSettings . statusPage and checkSettings . statusPage . componentId != '' ): statusIoResult = self . _updateStatusPage ( checkSettings , opLevel ) sendNotification = statusIoResult . incidentResult . incidentCreated if ( sendNotification ): self . notifier . notify ( checkSettings . name , str . format ( \" {0} is not responsive\" , checkSettings . name )) HttpGetResult HttpGetResult Attributes: Name Type Description success bool Whether or not the request was successful message str The error message from an unsuccessful request rawResponse str The string value of the response body response <built-in function any> An object representing the response body converted as JSON","title":"HealthChecks"},{"location":"healthchecks-reference/#healthchecks_1","text":"","title":"HealthChecks"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor","text":"HealthCheckExecutor The HealthCheckExecutor encapsulates the functionality to perform a health check on a site and properly notify users or update statuspage.io accordingly. A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statuspage_operator is present and the HealthCheckSettings have a componentId set, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description statuspage_operator StatusPageOperator The name of the site being checked notifier Notifier The url to be fetched as part of the check","title":"HealthCheckExecutor"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor.__init__","text":"Constructor Constructs an instance of the HealthCheckExecutor with the given StatusPageOperator and Notifier . Attributes: Name Type Description statuspage_operator The name of the site being checked notifier The url to be fetched as part of the check Source code in pi-monitoring\\healthchecks.py def __init__ ( self , statusOperator : statuspage_io . StatusPageOperator , notifier : notifications . Notifier ): \"\"\"Constructor Constructs an instance of the HealthCheckExecutor with the given [StatusPageOperator][statuspage_io.StatusPageOperator] and [Notifier][notifications.Notifier]. Attributes: statuspage_operator: The name of the site being checked notifier: The url to be fetched as part of the check \"\"\" self . statuspage_operator = statusOperator self . notifier = notifier","title":"__init__()"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor.execute_health_check","text":"Execute a health check Executes a health check using the provided HealthCheckSettings. Parameters: Name Type Description Default checkSettings HealthCheckSettings An instance of HealthCheckSettings required Source code in pi-monitoring\\healthchecks.py def execute_health_check ( self , checkSettings : configuration . HealthCheckSettings ): \"\"\" Execute a health check Executes a health check using the provided HealthCheckSettings. Args: checkSettings: An instance of [HealthCheckSettings][configuration.HealthCheckSettings] \"\"\" logger . info ( 'Checking %s ...' , checkSettings . name ) sendNotification = False opLevel = OpLevel . Operational httpResult = self . _get_http ( checkSettings . url ) if ( httpResult . success ): # Good Check logger . info ( \"Status OK\" ) opLevel = OpLevel . Operational else : # Bad check opLevel = OpLevel . Full_Outage logger . warning ( httpResult . message ) sendNotification = True if ( checkSettings . statusPage and checkSettings . statusPage . componentId != '' ): statusIoResult = self . _updateStatusPage ( checkSettings , opLevel ) sendNotification = statusIoResult . incidentResult . incidentCreated if ( sendNotification ): self . notifier . notify ( checkSettings . name , str . format ( \" {0} is not responsive\" , checkSettings . name ))","title":"execute_health_check()"},{"location":"healthchecks-reference/#healthchecks.HttpGetResult","text":"HttpGetResult Attributes: Name Type Description success bool Whether or not the request was successful message str The error message from an unsuccessful request rawResponse str The string value of the response body response <built-in function any> An object representing the response body converted as JSON","title":"HttpGetResult"},{"location":"notifications-reference/","text":"Notifications Notifier Notifier Class The Notifier class encapsulates the functionality to send email notifications. Attributes: Name Type Description config NotificationSettings An instance of NotificationSettings __init__ ( self , notifyConfig ) special Constructor Initialize the instance using the provided NotificationSettings . Source code in pi-monitoring\\notifications.py def __init__ ( self , notifyConfig : configuration . NotificationSettings ) -> None : \"\"\" Constructor Initialize the instance using the provided [NotificationSettings][configuration.NotificationSettings]. \"\"\" self . config = notifyConfig notify ( self , subject , content ) Send notification Build and send an email notificaiton using the provided parameters. Parameters: Name Type Description Default subject str The email subject. required content str the email content. required Source code in pi-monitoring\\notifications.py def notify ( self , subject : str , content : str ): \"\"\" Send notification Build and send an email notificaiton using the provided parameters. Args: subject: The email subject. content: the email content. \"\"\" if ( self . config . smsEmail != \"\" ): logger . debug ( \"Sending Notification to %s \" , self . config . smsEmail ) msg = EmailMessage () msg . set_content ( content ) msg [ 'Subject' ] = subject msg [ 'From' ] = self . config . smtp_sender_id msg [ 'To' ] = self . config . smsEmail try : server = smtplib . SMTP ( self . config . smtp_url , self . config . smtp_port ) server . starttls () server . login ( self . config . smtp_sender_id , self . config . smtp_sender_pass ) server . send_message ( msg , self . config . smtp_sender_id , self . config . smsEmail ) server . quit () except : logger . error ( \"Error sending notification: %s \" , sys . exc_info ()[ 0 ])","title":"Notifications"},{"location":"notifications-reference/#notifications_1","text":"","title":"Notifications"},{"location":"notifications-reference/#notifications.Notifier","text":"Notifier Class The Notifier class encapsulates the functionality to send email notifications. Attributes: Name Type Description config NotificationSettings An instance of NotificationSettings","title":"Notifier"},{"location":"notifications-reference/#notifications.Notifier.__init__","text":"Constructor Initialize the instance using the provided NotificationSettings . Source code in pi-monitoring\\notifications.py def __init__ ( self , notifyConfig : configuration . NotificationSettings ) -> None : \"\"\" Constructor Initialize the instance using the provided [NotificationSettings][configuration.NotificationSettings]. \"\"\" self . config = notifyConfig","title":"__init__()"},{"location":"notifications-reference/#notifications.Notifier.notify","text":"Send notification Build and send an email notificaiton using the provided parameters. Parameters: Name Type Description Default subject str The email subject. required content str the email content. required Source code in pi-monitoring\\notifications.py def notify ( self , subject : str , content : str ): \"\"\" Send notification Build and send an email notificaiton using the provided parameters. Args: subject: The email subject. content: the email content. \"\"\" if ( self . config . smsEmail != \"\" ): logger . debug ( \"Sending Notification to %s \" , self . config . smsEmail ) msg = EmailMessage () msg . set_content ( content ) msg [ 'Subject' ] = subject msg [ 'From' ] = self . config . smtp_sender_id msg [ 'To' ] = self . config . smsEmail try : server = smtplib . SMTP ( self . config . smtp_url , self . config . smtp_port ) server . starttls () server . login ( self . config . smtp_sender_id , self . config . smtp_sender_pass ) server . send_message ( msg , self . config . smtp_sender_id , self . config . smsEmail ) server . quit () except : logger . error ( \"Error sending notification: %s \" , sys . exc_info ()[ 0 ])","title":"notify()"},{"location":"statuspage_io-reference/","text":"StatusPage.io Incident Incident Class This class represents the details about a Statuspage.io incident Attributes: Name Type Description name str The incident name. description str The incident description. IncidentResult IncidentResult Class This class represents information about incidents created or resolved as part of a status change Attributes: Name Type Description incidentCreated bool True if an incident was created, false otherwise. incidentResolved bool True if an incident was created, false otherwise. StatusPageOperator StatusResult Class This class represents information about actions taken during a check and update. Attributes: Name Type Description config StatusPageSettings An instance of StatusPageSettings which contains settings for Statuspage.io communication client StatusPageClient An instance of StatusPageClient , built from the configuration values provided. __init__ ( self , statusPageConfig ) special Constructor Initialize the instance using the provided StatusPageSettings . Source code in pi-monitoring\\statuspage_io.py def __init__ ( self , statusPageConfig : configuration . StatusPageSettings ): \"\"\" Constructor Initialize the instance using the provided [StatusPageSettings][configuration.StatusPageSettings]. \"\"\" self . config = statusPageConfig self . client = statuspage_io_client . StatusPageClient ( self . config . apiKey , self . config . pageId ) IsConfigured ( self ) Validate configuration data Returns: Type Description bool True if the operator has a valid configuration, False otherwise. Source code in pi-monitoring\\statuspage_io.py def IsConfigured ( self ) -> bool : \"\"\" Validate configuration data Returns: True if the operator has a valid configuration, False otherwise. \"\"\" return self . config . apiKey != \"\" UpdateComponentStatus ( self , componentId , opLevel , incidentDetails = {}) Update Component Status Using the provided OpLevel, determine the component's statuspage.io status. If the incoming opLevel is Operational and the statuspage.io status is not, the component's status will be changed to operational , and any open incidents for that component will be resolved. If the incoming opLevel is any other value and the statuspage.io status is operational, the component's status will be changed to major_outage and an incident will be created using the provided incidentDetails Parameters: Name Type Description Default componentId str The component ID to check required opLevel OpLevel The current OpLevel for the provided component required incidentDetails Incident An instance of Incident which has the details of the incident to be created, if necessary. {} Returns: Type Description StatusResult An instance of StatusResult Source code in pi-monitoring\\statuspage_io.py def UpdateComponentStatus ( self , componentId : str , opLevel : OpLevel , incidentDetails : Incident = {}) -> StatusResult : \"\"\" Update Component Status Using the provided OpLevel, determine the component's statuspage.io status. If the incoming `opLevel` is [Operational][enums.OpLevel] and the statuspage.io status is not, the component's status will be changed to `operational`, and any open incidents for that component will be resolved. If the incoming `opLevel` is any other value and the statuspage.io status is operational, the component's status will be changed to `major_outage` and an incident will be created using the provided `incidentDetails` Args: componentId: The component ID to check opLevel: The current OpLevel for the provided component incidentDetails: An instance of [Incident][statuspage_io.Incident] which has the details of the incident to be created, if necessary. Returns: An instance of [StatusResult][statuspage_io.StatusResult] \"\"\" if opLevel == OpLevel . Operational : componentStatus = \"operational\" else : componentStatus = \"major_outage\" if ( componentStatus not in self . client . component_status_list ): raise ValueError ( str . format ( \"Invalid status ' {0} '. Valid values are {1} \" , componentStatus , self . client . component_status_list )) result = StatusResult () component = self . client . getComponent ( componentId ) if ( component . status != componentStatus ): result . statusChanged = True logger . info ( \"Changing status from %s to %s \" , component . status , componentStatus ) self . _updateComponentStatus ( componentId , componentStatus ) result . incidentResult = self . _processIncidentOnStatusChange ( componentId , componentStatus , incidentDetails ) return result StatusResult StatusResult Class This class represents information about actions taken during a check and update. Attributes: Name Type Description statusChanged bool True if the status has changed from the previous check, false otherwise. incidentResult IncidentResult An instance of IncidentResult .","title":"StatusPage.io"},{"location":"statuspage_io-reference/#statuspageio","text":"","title":"StatusPage.io"},{"location":"statuspage_io-reference/#statuspage_io.Incident","text":"Incident Class This class represents the details about a Statuspage.io incident Attributes: Name Type Description name str The incident name. description str The incident description.","title":"Incident"},{"location":"statuspage_io-reference/#statuspage_io.IncidentResult","text":"IncidentResult Class This class represents information about incidents created or resolved as part of a status change Attributes: Name Type Description incidentCreated bool True if an incident was created, false otherwise. incidentResolved bool True if an incident was created, false otherwise.","title":"IncidentResult"},{"location":"statuspage_io-reference/#statuspage_io.StatusPageOperator","text":"StatusResult Class This class represents information about actions taken during a check and update. Attributes: Name Type Description config StatusPageSettings An instance of StatusPageSettings which contains settings for Statuspage.io communication client StatusPageClient An instance of StatusPageClient , built from the configuration values provided.","title":"StatusPageOperator"},{"location":"statuspage_io-reference/#statuspage_io.StatusPageOperator.__init__","text":"Constructor Initialize the instance using the provided StatusPageSettings . Source code in pi-monitoring\\statuspage_io.py def __init__ ( self , statusPageConfig : configuration . StatusPageSettings ): \"\"\" Constructor Initialize the instance using the provided [StatusPageSettings][configuration.StatusPageSettings]. \"\"\" self . config = statusPageConfig self . client = statuspage_io_client . StatusPageClient ( self . config . apiKey , self . config . pageId )","title":"__init__()"},{"location":"statuspage_io-reference/#statuspage_io.StatusPageOperator.IsConfigured","text":"Validate configuration data Returns: Type Description bool True if the operator has a valid configuration, False otherwise. Source code in pi-monitoring\\statuspage_io.py def IsConfigured ( self ) -> bool : \"\"\" Validate configuration data Returns: True if the operator has a valid configuration, False otherwise. \"\"\" return self . config . apiKey != \"\"","title":"IsConfigured()"},{"location":"statuspage_io-reference/#statuspage_io.StatusPageOperator.UpdateComponentStatus","text":"Update Component Status Using the provided OpLevel, determine the component's statuspage.io status. If the incoming opLevel is Operational and the statuspage.io status is not, the component's status will be changed to operational , and any open incidents for that component will be resolved. If the incoming opLevel is any other value and the statuspage.io status is operational, the component's status will be changed to major_outage and an incident will be created using the provided incidentDetails Parameters: Name Type Description Default componentId str The component ID to check required opLevel OpLevel The current OpLevel for the provided component required incidentDetails Incident An instance of Incident which has the details of the incident to be created, if necessary. {} Returns: Type Description StatusResult An instance of StatusResult Source code in pi-monitoring\\statuspage_io.py def UpdateComponentStatus ( self , componentId : str , opLevel : OpLevel , incidentDetails : Incident = {}) -> StatusResult : \"\"\" Update Component Status Using the provided OpLevel, determine the component's statuspage.io status. If the incoming `opLevel` is [Operational][enums.OpLevel] and the statuspage.io status is not, the component's status will be changed to `operational`, and any open incidents for that component will be resolved. If the incoming `opLevel` is any other value and the statuspage.io status is operational, the component's status will be changed to `major_outage` and an incident will be created using the provided `incidentDetails` Args: componentId: The component ID to check opLevel: The current OpLevel for the provided component incidentDetails: An instance of [Incident][statuspage_io.Incident] which has the details of the incident to be created, if necessary. Returns: An instance of [StatusResult][statuspage_io.StatusResult] \"\"\" if opLevel == OpLevel . Operational : componentStatus = \"operational\" else : componentStatus = \"major_outage\" if ( componentStatus not in self . client . component_status_list ): raise ValueError ( str . format ( \"Invalid status ' {0} '. Valid values are {1} \" , componentStatus , self . client . component_status_list )) result = StatusResult () component = self . client . getComponent ( componentId ) if ( component . status != componentStatus ): result . statusChanged = True logger . info ( \"Changing status from %s to %s \" , component . status , componentStatus ) self . _updateComponentStatus ( componentId , componentStatus ) result . incidentResult = self . _processIncidentOnStatusChange ( componentId , componentStatus , incidentDetails ) return result","title":"UpdateComponentStatus()"},{"location":"statuspage_io-reference/#statuspage_io.StatusResult","text":"StatusResult Class This class represents information about actions taken during a check and update. Attributes: Name Type Description statusChanged bool True if the status has changed from the previous check, false otherwise. incidentResult IncidentResult An instance of IncidentResult .","title":"StatusResult"},{"location":"statuspage_io_client-reference/","text":"StatusPage.io Client StatusPageClient StatusPageClient Class The StatusPageClient class provides methods for interacting with the Statuspage.io's APIs Attributes: Name Type Description component_status_list List[str] A list of valid component status codes for StatusPage.io incident_status_list List[str] A list of valid incident status codes for live incidents in StatusPage.io scheduled_incident_status_list List[str] A list of valid incident status codes for scheduledStatusPage.io createIncident ( self , payload ) Create Incident Create a new incident using the provided payload as the object body. The payload object will be processed using json.dumps() . Parameters: Name Type Description Default payload object An object representing the JSON payload. Valid object representation can be found in the Statuspage.io docs . required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def createIncident ( self , payload : object ) -> object : \"\"\" Create Incident Create a new incident using the provided payload as the object body. The payload object will be processed using `json.dumps()`. Args: payload: An object representing the JSON payload. Valid object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents). Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents). \"\"\" incidentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /incidents\" , self . pageId ) logger . info ( \"Creating incident: %s \" , incidentUrl ) r = requests . post ( incidentUrl , headers = self . getHeaders (), data = json . dumps ( payload )) resultObject = r . json ( object_hook = lambda d : SimpleNamespace ( ** d )) logger . debug ( \"Create Incident Response: %s \" , resultObject ) return resultObject getComponent ( self , componentId ) Retrieve Component Information Retrieve the current component information using the provided componentId. Parameters: Name Type Description Default componentId str The id of the component to retrieve. required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def getComponent ( self , componentId : str ) -> object : \"\"\" Retrieve Component Information Retrieve the current component information using the provided componentId. Args: componentId: The id of the component to retrieve. Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/getPagesPageIdComponentsComponentId). \"\"\" componentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /components/ {1} \" , self . pageId , componentId ) logger . info ( \"Retrieving component from StatusPage: %s \" , componentUrl ) component = requests . get ( componentUrl , headers = self . getHeaders ()) return component . json ( object_hook = lambda d : SimpleNamespace ( ** d )) getUnresolvedIncidents ( self ) Retrieve Unresolved Incidents Retrieve all the current unresolved incidents. Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def getUnresolvedIncidents ( self ) -> object : \"\"\" Retrieve Unresolved Incidents Retrieve all the current unresolved incidents. Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/getPagesPageIdIncidentsUnresolved). \"\"\" logger . info ( \"Retrieving unresolved incidents\" ) unresolvedIncidentsUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /incidents/unresolved\" , self . pageId ) unresolvedIncidentsResponse = requests . get ( unresolvedIncidentsUrl , headers = self . getHeaders ()) result = unresolvedIncidentsResponse . json ( object_hook = lambda d : SimpleNamespace ( ** d )) return result updateComponent ( self , componentId , payload ) Update Component Information Update the given component using the provided payload as the object body. The payload object will be processed using json.dumps() . Parameters: Name Type Description Default componentId str The id of the component to update. required payload object An object representing the JSON payload. Valid object representation can be found in the Statuspage.io docs . required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def updateComponent ( self , componentId : str , payload : object ) -> object : \"\"\" Update Component Information Update the given component using the provided payload as the object body. The payload object will be processed using `json.dumps()`. Args: componentId: The id of the component to update. payload: An object representing the JSON payload. Valid object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId). Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId). \"\"\" componentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /components/ {1} \" , self . pageId , componentId ) logger . debug ( \"Updating component %s : %s \" , componentId , payload ) r = requests . put ( componentUrl , headers = self . getHeaders (), data = json . dumps ( payload )) return r . json ( object_hook = lambda d : SimpleNamespace ( ** d )) updateIncident ( self , incidentId , payload ) Update Incident Information Update the given incident using the provided payload as the object body. The payload object will be processed using json.dumps() . Parameters: Name Type Description Default incidentId str The id of the incident to update. required payload object An object representing the JSON payload. Valid object representation can be found in the Statuspage.io docs . required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def updateIncident ( self , incidentId : str , payload : object ) -> object : \"\"\" Update Incident Information Update the given incident using the provided payload as the object body. The payload object will be processed using `json.dumps()`. Args: incidentId: The id of the incident to update. payload: An object representing the JSON payload. Valid object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId). Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId). \"\"\" incidentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /incidents/ {1} \" , self . pageId , incidentId ) logger . info ( \"Updating incident %s : %s \" , incidentUrl , incidentId ) r = requests . patch ( incidentUrl , headers = self . getHeaders (), data = json . dumps ( payload )) resultObject = r . json ( object_hook = lambda d : SimpleNamespace ( ** d )) logger . debug ( \"Update Incident Response: %s \" , resultObject ) return resultObject","title":"StatusPage.io Client"},{"location":"statuspage_io_client-reference/#statuspageio-client","text":"","title":"StatusPage.io Client"},{"location":"statuspage_io_client-reference/#statuspage_io_client.StatusPageClient","text":"StatusPageClient Class The StatusPageClient class provides methods for interacting with the Statuspage.io's APIs Attributes: Name Type Description component_status_list List[str] A list of valid component status codes for StatusPage.io incident_status_list List[str] A list of valid incident status codes for live incidents in StatusPage.io scheduled_incident_status_list List[str] A list of valid incident status codes for scheduledStatusPage.io","title":"StatusPageClient"},{"location":"statuspage_io_client-reference/#statuspage_io_client.StatusPageClient.createIncident","text":"Create Incident Create a new incident using the provided payload as the object body. The payload object will be processed using json.dumps() . Parameters: Name Type Description Default payload object An object representing the JSON payload. Valid object representation can be found in the Statuspage.io docs . required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def createIncident ( self , payload : object ) -> object : \"\"\" Create Incident Create a new incident using the provided payload as the object body. The payload object will be processed using `json.dumps()`. Args: payload: An object representing the JSON payload. Valid object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents). Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/postPagesPageIdIncidents). \"\"\" incidentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /incidents\" , self . pageId ) logger . info ( \"Creating incident: %s \" , incidentUrl ) r = requests . post ( incidentUrl , headers = self . getHeaders (), data = json . dumps ( payload )) resultObject = r . json ( object_hook = lambda d : SimpleNamespace ( ** d )) logger . debug ( \"Create Incident Response: %s \" , resultObject ) return resultObject","title":"createIncident()"},{"location":"statuspage_io_client-reference/#statuspage_io_client.StatusPageClient.getComponent","text":"Retrieve Component Information Retrieve the current component information using the provided componentId. Parameters: Name Type Description Default componentId str The id of the component to retrieve. required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def getComponent ( self , componentId : str ) -> object : \"\"\" Retrieve Component Information Retrieve the current component information using the provided componentId. Args: componentId: The id of the component to retrieve. Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/getPagesPageIdComponentsComponentId). \"\"\" componentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /components/ {1} \" , self . pageId , componentId ) logger . info ( \"Retrieving component from StatusPage: %s \" , componentUrl ) component = requests . get ( componentUrl , headers = self . getHeaders ()) return component . json ( object_hook = lambda d : SimpleNamespace ( ** d ))","title":"getComponent()"},{"location":"statuspage_io_client-reference/#statuspage_io_client.StatusPageClient.getUnresolvedIncidents","text":"Retrieve Unresolved Incidents Retrieve all the current unresolved incidents. Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def getUnresolvedIncidents ( self ) -> object : \"\"\" Retrieve Unresolved Incidents Retrieve all the current unresolved incidents. Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/getPagesPageIdIncidentsUnresolved). \"\"\" logger . info ( \"Retrieving unresolved incidents\" ) unresolvedIncidentsUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /incidents/unresolved\" , self . pageId ) unresolvedIncidentsResponse = requests . get ( unresolvedIncidentsUrl , headers = self . getHeaders ()) result = unresolvedIncidentsResponse . json ( object_hook = lambda d : SimpleNamespace ( ** d )) return result","title":"getUnresolvedIncidents()"},{"location":"statuspage_io_client-reference/#statuspage_io_client.StatusPageClient.updateComponent","text":"Update Component Information Update the given component using the provided payload as the object body. The payload object will be processed using json.dumps() . Parameters: Name Type Description Default componentId str The id of the component to update. required payload object An object representing the JSON payload. Valid object representation can be found in the Statuspage.io docs . required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def updateComponent ( self , componentId : str , payload : object ) -> object : \"\"\" Update Component Information Update the given component using the provided payload as the object body. The payload object will be processed using `json.dumps()`. Args: componentId: The id of the component to update. payload: An object representing the JSON payload. Valid object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId). Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/putPagesPageIdComponentsComponentId). \"\"\" componentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /components/ {1} \" , self . pageId , componentId ) logger . debug ( \"Updating component %s : %s \" , componentId , payload ) r = requests . put ( componentUrl , headers = self . getHeaders (), data = json . dumps ( payload )) return r . json ( object_hook = lambda d : SimpleNamespace ( ** d ))","title":"updateComponent()"},{"location":"statuspage_io_client-reference/#statuspage_io_client.StatusPageClient.updateIncident","text":"Update Incident Information Update the given incident using the provided payload as the object body. The payload object will be processed using json.dumps() . Parameters: Name Type Description Default incidentId str The id of the incident to update. required payload object An object representing the JSON payload. Valid object representation can be found in the Statuspage.io docs . required Returns: Type Description object A SimpleNamespace object created from the JSON return. Object representation can be found in the Statuspage.io docs . Source code in pi-monitoring\\statuspage_io_client.py def updateIncident ( self , incidentId : str , payload : object ) -> object : \"\"\" Update Incident Information Update the given incident using the provided payload as the object body. The payload object will be processed using `json.dumps()`. Args: incidentId: The id of the incident to update. payload: An object representing the JSON payload. Valid object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId). Returns: A SimpleNamespace object created from the JSON return. Object representation can be found in the [Statuspage.io docs](https://developer.statuspage.io/#operation/patchPagesPageIdIncidentsIncidentId). \"\"\" incidentUrl = str . format ( \"https://api.statuspage.io/v1/pages/ {0} /incidents/ {1} \" , self . pageId , incidentId ) logger . info ( \"Updating incident %s : %s \" , incidentUrl , incidentId ) r = requests . patch ( incidentUrl , headers = self . getHeaders (), data = json . dumps ( payload )) resultObject = r . json ( object_hook = lambda d : SimpleNamespace ( ** d )) logger . debug ( \"Update Incident Response: %s \" , resultObject ) return resultObject","title":"updateIncident()"}]}