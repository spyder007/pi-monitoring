{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PI Monitoring Documentation Hello!","title":"PI Monitoring Documentation"},{"location":"#pi-monitoring-documentation","text":"Hello!","title":"PI Monitoring Documentation"},{"location":"configuration-reference/","text":"Configuration Configuration Module This module provides a function for reading a JSON file into the provided Settings object. HealthCheckSettings Settings for a HealthCheck A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statusPage is defined, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description name str The name of the site being checked url str The url to be fetched as part of the check statusPage StatusPageComponentSettings Any StatusPage-related component settings MonitorSettings MonitorSettings This class represents the entire structure of the configuration file ( monitor.config.json by default). Attributes: Name Type Description statusChecks List[configuration.HealthCheckSettings] The collection of statusCheck settings notification NotificationSettings The settings object for notifications statusPage StatusPageSettings The settings object for StatusPage.io NotificationSettings Notification Settings This class represents settings for notifications. If you are using Gmail to send, you need to set your account's Allow Less Secure Apps setting to true Attributes: Name Type Description smtp_url str The URL of the SMTP host smtp_port int The SMTP Port to use smtp_sender_id str The SMTP user smtp_sender_Pass str The SMTP user's password smsEmail str The email to receive notifications StatusPageComponentSettings Settings for StatusPage.io components Attributes: Name Type Description componentId str The ID of the component in your statuspage.io page StatusPageSettings Settings for StatusPage.io Attributes: Name Type Description apiKey str The API Key to access statuspage.io pageId str Your PageId for statuspage.io readConfiguration ( file = 'monitor.config.json' , defaultSettings = {}) Read Configuration file and return settings Parameters: Name Type Description Default file str The file name to use for configuration. The default value is monitor.config.json 'monitor.config.json' defaultSettings MonitorSettings A default instance of the settings to use if the file cannot be found. {} Returns: Type Description MonitorSettings MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. Source code in pi-monitoring\\configuration.py def readConfiguration ( file : str = 'monitor.config.json' , defaultSettings : MonitorSettings = {}) -> MonitorSettings : \"\"\"Read Configuration file and return settings Args: file: The file name to use for configuration. The default value is `monitor.config.json` defaultSettings: A default instance of the settings to use if the file cannot be found. Returns: MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. \"\"\" configPath = Path ( file ) if ( not configPath . exists ()): logger . info ( \"Configuration file not found: %s . Using default\" , file ) return defaultSettings configDataRaw = configPath . read_text () return json . loads ( configDataRaw , object_hook = Generic . from_dict )","title":"Configuration"},{"location":"configuration-reference/#configuration_1","text":"Configuration Module This module provides a function for reading a JSON file into the provided Settings object.","title":"Configuration"},{"location":"configuration-reference/#configuration.HealthCheckSettings","text":"Settings for a HealthCheck A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statusPage is defined, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description name str The name of the site being checked url str The url to be fetched as part of the check statusPage StatusPageComponentSettings Any StatusPage-related component settings","title":"HealthCheckSettings"},{"location":"configuration-reference/#configuration.MonitorSettings","text":"MonitorSettings This class represents the entire structure of the configuration file ( monitor.config.json by default). Attributes: Name Type Description statusChecks List[configuration.HealthCheckSettings] The collection of statusCheck settings notification NotificationSettings The settings object for notifications statusPage StatusPageSettings The settings object for StatusPage.io","title":"MonitorSettings"},{"location":"configuration-reference/#configuration.NotificationSettings","text":"Notification Settings This class represents settings for notifications. If you are using Gmail to send, you need to set your account's Allow Less Secure Apps setting to true Attributes: Name Type Description smtp_url str The URL of the SMTP host smtp_port int The SMTP Port to use smtp_sender_id str The SMTP user smtp_sender_Pass str The SMTP user's password smsEmail str The email to receive notifications","title":"NotificationSettings"},{"location":"configuration-reference/#configuration.StatusPageComponentSettings","text":"Settings for StatusPage.io components Attributes: Name Type Description componentId str The ID of the component in your statuspage.io page","title":"StatusPageComponentSettings"},{"location":"configuration-reference/#configuration.StatusPageSettings","text":"Settings for StatusPage.io Attributes: Name Type Description apiKey str The API Key to access statuspage.io pageId str Your PageId for statuspage.io","title":"StatusPageSettings"},{"location":"configuration-reference/#configuration.readConfiguration","text":"Read Configuration file and return settings Parameters: Name Type Description Default file str The file name to use for configuration. The default value is monitor.config.json 'monitor.config.json' defaultSettings MonitorSettings A default instance of the settings to use if the file cannot be found. {} Returns: Type Description MonitorSettings MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. Source code in pi-monitoring\\configuration.py def readConfiguration ( file : str = 'monitor.config.json' , defaultSettings : MonitorSettings = {}) -> MonitorSettings : \"\"\"Read Configuration file and return settings Args: file: The file name to use for configuration. The default value is `monitor.config.json` defaultSettings: A default instance of the settings to use if the file cannot be found. Returns: MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. \"\"\" configPath = Path ( file ) if ( not configPath . exists ()): logger . info ( \"Configuration file not found: %s . Using default\" , file ) return defaultSettings configDataRaw = configPath . read_text () return json . loads ( configDataRaw , object_hook = Generic . from_dict )","title":"readConfiguration()"}]}