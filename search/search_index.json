{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PI Monitoring Documentation Hello!","title":"PI Monitoring Documentation"},{"location":"#pi-monitoring-documentation","text":"Hello!","title":"PI Monitoring Documentation"},{"location":"configuration-reference/","text":"Configuration Configuration Module This module provides a function for reading a JSON file into the provided Settings object. HealthCheckSettings Settings for a HealthCheck A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statusPage is defined, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description name str The name of the site being checked url str The url to be fetched as part of the check statusPage StatusPageComponentSettings Any StatusPage-related component settings MonitorSettings MonitorSettings This class represents the entire structure of the configuration file ( monitor.config.json by default). Attributes: Name Type Description statusChecks List[configuration.HealthCheckSettings] The collection of statusCheck settings notification NotificationSettings The settings object for notifications statusPage StatusPageSettings The settings object for StatusPage.io NotificationSettings Notification Settings This class represents settings for notifications. If you are using Gmail to send, you need to set your account's Allow Less Secure Apps setting to true Attributes: Name Type Description smtp_url str The URL of the SMTP host smtp_port int The SMTP Port to use smtp_sender_id str The SMTP user smtp_sender_Pass str The SMTP user's password smsEmail str The email to receive notifications StatusPageComponentSettings Settings for StatusPage.io components Attributes: Name Type Description componentId str The ID of the component in your statuspage.io page StatusPageSettings Settings for StatusPage.io Attributes: Name Type Description apiKey str The API Key to access statuspage.io pageId str Your PageId for statuspage.io readConfiguration ( file = 'monitor.config.json' , defaultSettings = {}) Read Configuration file and return settings Parameters: Name Type Description Default file str The file name to use for configuration. The default value is monitor.config.json 'monitor.config.json' defaultSettings MonitorSettings A default instance of the settings to use if the file cannot be found. {} Returns: Type Description MonitorSettings MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. Source code in pi-monitoring\\configuration.py def readConfiguration ( file : str = 'monitor.config.json' , defaultSettings : MonitorSettings = {}) -> MonitorSettings : \"\"\"Read Configuration file and return settings Args: file: The file name to use for configuration. The default value is `monitor.config.json` defaultSettings: A default instance of the settings to use if the file cannot be found. Returns: MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. \"\"\" configPath = Path ( file ) if ( not configPath . exists ()): logger . info ( \"Configuration file not found: %s . Using default\" , file ) return defaultSettings configDataRaw = configPath . read_text () return json . loads ( configDataRaw , object_hook = Generic . from_dict )","title":"Configuration"},{"location":"configuration-reference/#configuration_1","text":"Configuration Module This module provides a function for reading a JSON file into the provided Settings object.","title":"Configuration"},{"location":"configuration-reference/#configuration.HealthCheckSettings","text":"Settings for a HealthCheck A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statusPage is defined, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description name str The name of the site being checked url str The url to be fetched as part of the check statusPage StatusPageComponentSettings Any StatusPage-related component settings","title":"HealthCheckSettings"},{"location":"configuration-reference/#configuration.MonitorSettings","text":"MonitorSettings This class represents the entire structure of the configuration file ( monitor.config.json by default). Attributes: Name Type Description statusChecks List[configuration.HealthCheckSettings] The collection of statusCheck settings notification NotificationSettings The settings object for notifications statusPage StatusPageSettings The settings object for StatusPage.io","title":"MonitorSettings"},{"location":"configuration-reference/#configuration.NotificationSettings","text":"Notification Settings This class represents settings for notifications. If you are using Gmail to send, you need to set your account's Allow Less Secure Apps setting to true Attributes: Name Type Description smtp_url str The URL of the SMTP host smtp_port int The SMTP Port to use smtp_sender_id str The SMTP user smtp_sender_Pass str The SMTP user's password smsEmail str The email to receive notifications","title":"NotificationSettings"},{"location":"configuration-reference/#configuration.StatusPageComponentSettings","text":"Settings for StatusPage.io components Attributes: Name Type Description componentId str The ID of the component in your statuspage.io page","title":"StatusPageComponentSettings"},{"location":"configuration-reference/#configuration.StatusPageSettings","text":"Settings for StatusPage.io Attributes: Name Type Description apiKey str The API Key to access statuspage.io pageId str Your PageId for statuspage.io","title":"StatusPageSettings"},{"location":"configuration-reference/#configuration.readConfiguration","text":"Read Configuration file and return settings Parameters: Name Type Description Default file str The file name to use for configuration. The default value is monitor.config.json 'monitor.config.json' defaultSettings MonitorSettings A default instance of the settings to use if the file cannot be found. {} Returns: Type Description MonitorSettings MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. Source code in pi-monitoring\\configuration.py def readConfiguration ( file : str = 'monitor.config.json' , defaultSettings : MonitorSettings = {}) -> MonitorSettings : \"\"\"Read Configuration file and return settings Args: file: The file name to use for configuration. The default value is `monitor.config.json` defaultSettings: A default instance of the settings to use if the file cannot be found. Returns: MonitorSettings: A MonitorSettings object populated from the given file, or an empty Settings object. \"\"\" configPath = Path ( file ) if ( not configPath . exists ()): logger . info ( \"Configuration file not found: %s . Using default\" , file ) return defaultSettings configDataRaw = configPath . read_text () return json . loads ( configDataRaw , object_hook = Generic . from_dict )","title":"readConfiguration()"},{"location":"healthchecks-reference/","text":"HealthChecks HealthCheckExecutor HealthCheckExecutor The HealthCheckExecutor encapsulates the functionality to perform a health check on a site and properly notify users or update statuspage.io accordingly. A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statuspage_operator is present and the HealthCheckSettings have a componentId set, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description statuspage_operator StatusPageOperator The name of the site being checked notifier Notifier The url to be fetched as part of the check __init__ ( self , statusOperator , notifier ) special Constructor Constructs an instance of the HealthCheckExecutor with the given StatusPageOperator and Notifier . Attributes: Name Type Description statuspage_operator The name of the site being checked notifier The url to be fetched as part of the check Source code in pi-monitoring\\healthchecks.py def __init__ ( self , statusOperator : statuspage_io . StatusPageOperator , notifier : notifications . Notifier ): \"\"\"Constructor Constructs an instance of the HealthCheckExecutor with the given [StatusPageOperator][statuspage_io.StatusPageOperator] and [Notifier][notifications.Notifier]. Attributes: statuspage_operator: The name of the site being checked notifier: The url to be fetched as part of the check \"\"\" self . statuspage_operator = statusOperator self . notifier = notifier execute_health_check ( self , checkSettings ) Execute a health check Executes a health check using the provided HealthCheckSettings. Parameters: Name Type Description Default checkSettings HealthCheckSettings An instance of HealthCheckSettings required Source code in pi-monitoring\\healthchecks.py def execute_health_check ( self , checkSettings : configuration . HealthCheckSettings ): \"\"\" Execute a health check Executes a health check using the provided HealthCheckSettings. Args: checkSettings: An instance of [HealthCheckSettings][configuration.HealthCheckSettings] \"\"\" logger . info ( 'Checking %s ...' , checkSettings . name ) sendNotification = False opLevel = OpLevel . Operational httpResult = self . get_http ( checkSettings . url ) if ( httpResult . success ): # Good Check logger . info ( \"Status OK\" ) opLevel = OpLevel . Operational else : # Bad check opLevel = OpLevel . Full_Outage logger . warning ( httpResult . message ) sendNotification = True if ( checkSettings . statusPage and checkSettings . statusPage . componentId != '' ): statusIoResult = self . updateStatusPage ( checkSettings , opLevel ) sendNotification = statusIoResult . incidentResult . incidentCreated if ( sendNotification ): self . notifier . notify ( checkSettings . name , str . format ( \" {0} is not responsive\" , checkSettings . name )) get_http ( self , url ) Retrieve data from the URL Attempt to get data from the provided URL Parameters: Name Type Description Default url str The url to be retrieved required Returns: Type Description HttpGetResult An HttpGetResult Source code in pi-monitoring\\healthchecks.py def get_http ( self , url : str ) -> HttpGetResult : \"\"\" Retrieve data from the URL Attempt to get data from the provided URL Args: url: The url to be retrieved Returns: An [HttpGetResult][HttpGetResult] \"\"\" if ( not url or url == \"\" ): result = HttpGetResult ( False , \"no url defined\" ) return result try : logger . info ( \"Requesting %s \" , url ) r = requests . get ( url ) result = self . process_response ( r ) except Exception as e : logger . error ( \"Request failed exception %s \" , e ) result = HttpGetResult ( False , \"Unknown status failure\" ) return result process_response ( self , r ) Process the HTTP Requests response Convert the provided Response object from the requests module into an HttpGetResult . Parameters: Name Type Description Default url The url to be retrieved required Returns: Type Description HttpGetResult An HttpGetResult Source code in pi-monitoring\\healthchecks.py def process_response ( self , r : requests . Response ) -> HttpGetResult : \"\"\" Process the HTTP Requests response Convert the provided Response object from the requests module into an [HttpGetResult][HttpGetResult]. Args: url: The url to be retrieved Returns: An [HttpGetResult][HttpGetResult] \"\"\" result = HttpGetResult ( r . status_code == 200 ) if ( not result . success ): logger . info ( \"Request failed with Response Code %d : %s \" , r . status_code , r . text ) result . message = str . format ( \" {0} {1} \" , r . status_code , r . text ) return result result . rawResponse = r . text try : result . response = r . json ( object_hook = lambda d : SimpleNamespace ( ** d )) except : result . response = {} return result HttpGetResult HttpGetResult Attributes: Name Type Description success bool Whether or not the request was successful message str The error message from an unsuccessful request rawResponse str The string value of the response body response <built-in function any> An object representing the response body converted as JSON","title":"HealthChecks"},{"location":"healthchecks-reference/#healthchecks_1","text":"","title":"HealthChecks"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor","text":"HealthCheckExecutor The HealthCheckExecutor encapsulates the functionality to perform a health check on a site and properly notify users or update statuspage.io accordingly. A Healthcheck represents a simple request to the defined url . If a non-200 the request generates an exception or a non-200 response, the site is determined to be down. If statuspage_operator is present and the HealthCheckSettings have a componentId set, statuspage.io will be updated according to the following rules. If the site returns a 2xx response and statuspage.io lists the component as non-operational: The component's status will be set to operational Any open incidents associated with this component will be marked as resolved If the site returns a non-2xx response or an exception and statuspage.io lists the component as operational: The component's status will be set to operational An incident will be opened using the name and associated with this component. Attributes: Name Type Description statuspage_operator StatusPageOperator The name of the site being checked notifier Notifier The url to be fetched as part of the check","title":"HealthCheckExecutor"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor.__init__","text":"Constructor Constructs an instance of the HealthCheckExecutor with the given StatusPageOperator and Notifier . Attributes: Name Type Description statuspage_operator The name of the site being checked notifier The url to be fetched as part of the check Source code in pi-monitoring\\healthchecks.py def __init__ ( self , statusOperator : statuspage_io . StatusPageOperator , notifier : notifications . Notifier ): \"\"\"Constructor Constructs an instance of the HealthCheckExecutor with the given [StatusPageOperator][statuspage_io.StatusPageOperator] and [Notifier][notifications.Notifier]. Attributes: statuspage_operator: The name of the site being checked notifier: The url to be fetched as part of the check \"\"\" self . statuspage_operator = statusOperator self . notifier = notifier","title":"__init__()"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor.execute_health_check","text":"Execute a health check Executes a health check using the provided HealthCheckSettings. Parameters: Name Type Description Default checkSettings HealthCheckSettings An instance of HealthCheckSettings required Source code in pi-monitoring\\healthchecks.py def execute_health_check ( self , checkSettings : configuration . HealthCheckSettings ): \"\"\" Execute a health check Executes a health check using the provided HealthCheckSettings. Args: checkSettings: An instance of [HealthCheckSettings][configuration.HealthCheckSettings] \"\"\" logger . info ( 'Checking %s ...' , checkSettings . name ) sendNotification = False opLevel = OpLevel . Operational httpResult = self . get_http ( checkSettings . url ) if ( httpResult . success ): # Good Check logger . info ( \"Status OK\" ) opLevel = OpLevel . Operational else : # Bad check opLevel = OpLevel . Full_Outage logger . warning ( httpResult . message ) sendNotification = True if ( checkSettings . statusPage and checkSettings . statusPage . componentId != '' ): statusIoResult = self . updateStatusPage ( checkSettings , opLevel ) sendNotification = statusIoResult . incidentResult . incidentCreated if ( sendNotification ): self . notifier . notify ( checkSettings . name , str . format ( \" {0} is not responsive\" , checkSettings . name ))","title":"execute_health_check()"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor.get_http","text":"Retrieve data from the URL Attempt to get data from the provided URL Parameters: Name Type Description Default url str The url to be retrieved required Returns: Type Description HttpGetResult An HttpGetResult Source code in pi-monitoring\\healthchecks.py def get_http ( self , url : str ) -> HttpGetResult : \"\"\" Retrieve data from the URL Attempt to get data from the provided URL Args: url: The url to be retrieved Returns: An [HttpGetResult][HttpGetResult] \"\"\" if ( not url or url == \"\" ): result = HttpGetResult ( False , \"no url defined\" ) return result try : logger . info ( \"Requesting %s \" , url ) r = requests . get ( url ) result = self . process_response ( r ) except Exception as e : logger . error ( \"Request failed exception %s \" , e ) result = HttpGetResult ( False , \"Unknown status failure\" ) return result","title":"get_http()"},{"location":"healthchecks-reference/#healthchecks.HealthCheckExecutor.process_response","text":"Process the HTTP Requests response Convert the provided Response object from the requests module into an HttpGetResult . Parameters: Name Type Description Default url The url to be retrieved required Returns: Type Description HttpGetResult An HttpGetResult Source code in pi-monitoring\\healthchecks.py def process_response ( self , r : requests . Response ) -> HttpGetResult : \"\"\" Process the HTTP Requests response Convert the provided Response object from the requests module into an [HttpGetResult][HttpGetResult]. Args: url: The url to be retrieved Returns: An [HttpGetResult][HttpGetResult] \"\"\" result = HttpGetResult ( r . status_code == 200 ) if ( not result . success ): logger . info ( \"Request failed with Response Code %d : %s \" , r . status_code , r . text ) result . message = str . format ( \" {0} {1} \" , r . status_code , r . text ) return result result . rawResponse = r . text try : result . response = r . json ( object_hook = lambda d : SimpleNamespace ( ** d )) except : result . response = {} return result","title":"process_response()"},{"location":"healthchecks-reference/#healthchecks.HttpGetResult","text":"HttpGetResult Attributes: Name Type Description success bool Whether or not the request was successful message str The error message from an unsuccessful request rawResponse str The string value of the response body response <built-in function any> An object representing the response body converted as JSON","title":"HttpGetResult"},{"location":"notifications-reference/","text":"Notifications Notifier Notifier Class The Notifier class encapsulates the functionality to send email notifications. Attributes: Name Type Description config NotificationSettings An instance of NotificationSettings","title":"Notifications"},{"location":"notifications-reference/#notifications_1","text":"","title":"Notifications"},{"location":"notifications-reference/#notifications.Notifier","text":"Notifier Class The Notifier class encapsulates the functionality to send email notifications. Attributes: Name Type Description config NotificationSettings An instance of NotificationSettings","title":"Notifier"},{"location":"statuspage_io-reference/","text":"StatusPage.io StatusPageOperator checkAndLogIncident ( self , componentId , newComponentStatus , incidentDetails ) For now, if it's operational, close open incidents, and if it's not operational, create a new ticket if one isn't already open for this component. Future state will involve more detail around outage and maintenance Source code in pi-monitoring\\statuspage_io.py def checkAndLogIncident ( self , componentId : str , newComponentStatus : str , incidentDetails : Incident ) -> IncidentResult : ''' For now, if it's operational, close open incidents, and if it's not operational, create a new ticket if one isn't already open for this component. Future state will involve more detail around outage and maintenance ''' incidentResult = IncidentResult () associatedIncidents = self . getAssociatedIncident ( componentId ) asscIncidentCount = len ( associatedIncidents ) logger . info ( \"Associated Incidents for %s : %d \" , componentId , asscIncidentCount ) if ( newComponentStatus == \"operational\" and asscIncidentCount > 0 ): for incident in associatedIncidents : self . closeIncident ( incident . id ) incidentResult . incidentResolved = True elif ( newComponentStatus == \"major_outage\" and asscIncidentCount == 0 ): self . createIncident ( componentId , newComponentStatus , incidentDetails ) incidentResult . incidentCreated = True return incidentResult","title":"StatusPage.io"},{"location":"statuspage_io-reference/#statuspageio","text":"","title":"StatusPage.io"},{"location":"statuspage_io-reference/#statuspage_io.StatusPageOperator","text":"","title":"StatusPageOperator"},{"location":"statuspage_io-reference/#statuspage_io.StatusPageOperator.checkAndLogIncident","text":"For now, if it's operational, close open incidents, and if it's not operational, create a new ticket if one isn't already open for this component. Future state will involve more detail around outage and maintenance Source code in pi-monitoring\\statuspage_io.py def checkAndLogIncident ( self , componentId : str , newComponentStatus : str , incidentDetails : Incident ) -> IncidentResult : ''' For now, if it's operational, close open incidents, and if it's not operational, create a new ticket if one isn't already open for this component. Future state will involve more detail around outage and maintenance ''' incidentResult = IncidentResult () associatedIncidents = self . getAssociatedIncident ( componentId ) asscIncidentCount = len ( associatedIncidents ) logger . info ( \"Associated Incidents for %s : %d \" , componentId , asscIncidentCount ) if ( newComponentStatus == \"operational\" and asscIncidentCount > 0 ): for incident in associatedIncidents : self . closeIncident ( incident . id ) incidentResult . incidentResolved = True elif ( newComponentStatus == \"major_outage\" and asscIncidentCount == 0 ): self . createIncident ( componentId , newComponentStatus , incidentDetails ) incidentResult . incidentCreated = True return incidentResult","title":"checkAndLogIncident()"},{"location":"statuspage_io_client-reference/","text":"StatusPage.io Client","title":"StatusPage.io Client"},{"location":"statuspage_io_client-reference/#statuspageio-client","text":"","title":"StatusPage.io Client"}]}